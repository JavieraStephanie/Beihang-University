CONSTTK const
INTTK int
IDENFR A1
ASSIGN =
INTCON 0
COMMA ,
IDENFR a
ASSIGN =
INTCON 6
COMMA ,
IDENFR a2
ASSIGN =
PLUS +
INTCON 7
COMMA ,
IDENFR a3
ASSIGN =
MINU -
INTCON 7
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
CHARCON c
COMMA ,
IDENFR d
ASSIGN =
CHARCON 7
SEMICN ;
CHARTK char
IDENFR ch
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR num
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 20
RBRACK ]
SEMICN ;
CHARTK char
IDENFR charr
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR subState
LPARENT (
RPARENT )
LBRACE {
LBRACE {
IDENFR subState
LPARENT (
RPARENT )
SEMICN ;
IDENFR subState
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR subState
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IDENFR subState
LPARENT (
LPARENT (
IDENFR h
MULT *
INTCON 7
DIV /
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
IDENFR subState
LPARENT (
LPARENT (
INTCON 1
PLUS +
INTCON 3
DIV /
INTCON 2
MINU -
INTCON 4
RPARENT )
DIV /
INTCON 54
COMMA ,
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR subState
LPARENT (
LPARENT (
INTCON 1
MINU -
INTCON 2
MINU -
INTCON 3
MINU -
INTCON 4
DIV /
INTCON 5
DIV /
INTCON 6
MULT *
INTCON 6
RPARENT )
COMMA ,
IDENFR a
PLUS +
INTCON 3
DIV /
INTCON 2
MINU -
LPARENT (
INTCON 2
RPARENT )
COMMA ,
LPARENT (
INTCON 2
DIV /
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON YEAYEA! Emmmm !@#$%&(*^#Q
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON HUHUHU~~~
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON HIHIHI&^%$&@
COMMA ,
IDENFR a
PLUS +
LPARENT (
IDENFR b
RPARENT )
DIV /
LPARENT (
INTCON 3
MULT *
INTCON 43
DIV /
IDENFR rea
RPARENT )
MINU -
INTCON 2
PLUS +
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
LPARENT (
IDENFR b
PLUS +
INTCON 4
DIV /
INTCON 3
MULT *
INTCON 2
MINU -
LPARENT (
INTCON 1
MINU -
INTCON 2
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR cad
LSS <
INTCON 10
RPARENT )
PRINTFTK printf
LPARENT (
STRCON ONLY
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR abc
RPARENT )
IFTK if
LPARENT (
IDENFR def
RPARENT )
PRINTFTK printf
LPARENT (
STRCON DOUBLE
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cad
LSS <
INTCON 10
RPARENT )
PRINTFTK printf
LPARENT (
STRCON YEY
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON DANGER
RPARENT )
SEMICN ;
DOTK do
PRINTFTK printf
LPARENT (
STRCON DODO
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
GRE >
INTCON 2
RPARENT )
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
DOTK do
LBRACE {
FORTK for
LPARENT (
IDENFR r
ASSIGN =
INTCON 10
SEMICN ;
IDENFR r
GRE >
INTCON 1
SEMICN ;
IDENFR r
ASSIGN =
IDENFR r
MINU -
INTCON 1
RPARENT )
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR r
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
INTCON 1
GRE >
INTCON 2
RPARENT )
WHILETK while
LPARENT (
IDENFR a
GRE >
INTCON 10
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR bca
GEQ >=
INTCON 210
RPARENT )
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON HEHE
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
PRINTFTK printf
LPARENT (
STRCON ELSE ELSE!
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON ONE!
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
INTCON 32
RPARENT )
PRINTFTK printf
LPARENT (
STRCON DANGER
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON SURPRISE!
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
RETURNTK return
LPARENT (
CHARCON c
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR swap
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
INTTK int
IDENFR temp
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
IDENFR y
SEMICN ;
IDENFR y
ASSIGN =
IDENFR temp
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testExp
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR r
COMMA ,
IDENFR sum
SEMICN ;
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR r
ASSIGN =
INTCON 10
SEMICN ;
IDENFR r
GRE >
INTCON 1
SEMICN ;
IDENFR r
ASSIGN =
IDENFR r
MINU -
INTCON 1
RPARENT )
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR r
SEMICN ;
SEMICN ;
IDENFR sum
ASSIGN =
LPARENT (
IDENFR A1
PLUS +
INTCON 2
RPARENT )
MULT *
IDENFR a3
DIV /
INTCON 7
SEMICN ;
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR r
SEMICN ;
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
PLUS +
INTCON 2
SEMICN ;
IDENFR charr
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
CHARCON c
SEMICN ;
IDENFR charr
ASSIGN =
IDENFR subState
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON done Exp!
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR retInt
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR x
COMMA ,
IDENFR y
SEMICN ;
IDENFR x
ASSIGN =
INTCON 1
SEMICN ;
IDENFR y
ASSIGN =
INTCON 2
SEMICN ;
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR y
PLUS +
IDENFR n
SEMICN ;
RETURNTK return
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR retChar
LPARENT (
CHARTK char
IDENFR p
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR p
RPARENT )
SEMICN ;
IDENFR p
ASSIGN =
CHARCON u
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON What is p?
COMMA ,
IDENFR p
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR p
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR emm
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ugh
ASSIGN =
CHARCON y
SEMICN ;
INTTK int
IDENFR u
COMMA ,
IDENFR l
LBRACK [
INTCON 9
RBRACK ]
SEMICN ;
INTTK int
IDENFR bla
LBRACK [
INTCON 12
RBRACK ]
SEMICN ;
CHARTK char
IDENFR zzz
COMMA ,
IDENFR wake
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR hmm
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Test char limits
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON !#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^`abcdefghijklmnopqrstuvwxyz{|}~
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR i
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR swap
LPARENT (
IDENFR i
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
IDENFR testExp
LPARENT (
RPARENT )
SEMICN ;
IDENFR bla
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR retInt
LPARENT (
IDENFR emm
RPARENT )
SEMICN ;
IDENFR u
ASSIGN =
IDENFR bla
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR bla
LBRACK [
INTCON 1
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
IDENFR zzz
ASSIGN =
IDENFR retChar
LPARENT (
IDENFR ugh
RPARENT )
SEMICN ;
IDENFR charr
LBRACK [
INTCON 3
MULT *
INTCON 1
RBRACK ]
ASSIGN =
IDENFR zzz
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR charr
LBRACK [
INTCON 3
PLUS +
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
